<?xml version="1.0"?>
<doc>
<assembly>
<name>
Consequences_Assist
</name>
</assembly>
<members>
<member name="T:Consequences_Assist.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Consequences_Assist.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Consequences_Assist.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.#ctor(GDALAssist.Projection,GDALAssist.Projection)">
 <summary>
 This constructor asks for the projection that the inputs to the query will be made with, and the output projection the user wants the results to be written to.  The NSI is in the GCS coordinate system.
 </summary>
 <param name="inputprojection">the projection that the points defining the query will be made to.</param>
 <param name="outputprojection">(OPTIONAL) the projection that the resulting points will be written in, default is to use the same projection as the input projection.</param>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.#ctor">
 <summary>
 The NSI is in the GCS coordinate system, this constructor will output the data without reprojecting it, and it is required that the input points for bounding box queries will be in the gcs coordinate system.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.GetStats(System.String)">
 <summary>
 Get the statistics of an area specified by a GEOFIP id.
 </summary>
 <param name="FIPS">Must be larger than 5 characters</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.GetStats(LifeSimGIS.PointD,LifeSimGIS.PointD)">
 <summary>
 Get the statistics of an area as specified by a bounding box
 </summary>
 <param name="UpperLeft">A point defining the upper left corner of a bounding box</param>
 <param name="LowerRight">A point defining the lower right corner of a bounding box</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.GetStats(LifeSimGIS.PointD[])">
 <summary>
 Get the statistics of an area as specified by a simple polygon
 </summary>
 <param name="points">must be less than 2000 points, and the first point must be the same as the last point</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.GetStructures(System.String,System.String,System.String)">
 <summary>
 Gets the structures contained within an area as specified by GEOFIP id
 </summary>
 <param name="FIPS">Must be larger than 5 characters</param>
 <param name="OutputDirectory">The output directory for the resulting shapefile</param>
 <param name="shapename">The name of the shapefile</param>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.GetNSIStructures(LifeSimGIS.PointD,LifeSimGIS.PointD)">
 <summary>
 Gets the structures contained within a bounding box
 </summary>
 <param name="upperLeft">The upper left corner of a bounding box</param>
 <param name="LowerRight">The lower right corner of a bounding box</param>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.GetNSIStructures(LifeSimGIS.Extent)">
 <summary>
 Gets the structures contained within a bounding box
 </summary>
 <param name="Extent">Extent of the bounding box.  Assumes projection is in WGS84</param>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.GetNSIStructures(LifeSimGIS.PointD[])">
 <summary>
 Gets the structures contained within a simple polygon as NSI structures
 </summary>
 <param name="PolygonPoints">an array of points that make up a polygon, must be less than 2000 points, and must have the first point and the last point be the same point</param>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.GetStructuresAsCSV(System.String)">
 <summary>
 Gets the structures contained within an area as specified by GEOFIP id as a temp csv file
 </summary>
 <param name="FIPS">Must be larger than 5 characters</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.GetStructuresAsCSV(LifeSimGIS.PointD,LifeSimGIS.PointD)">
 <summary>
 Gets the structures contained within a bounding box, and saves them to a temp csv file
 </summary>
 <param name="upperLeft">The upper left corner of a bounding box</param>
 <param name="LowerRight">The lower right corner of a bounding box</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Interface.GetStructuresAsCSV(LifeSimGIS.PointD[])">
 <summary>
 Gets the structures contained within a simple polygon as a temp csv file
 </summary>
 <param name="PolygonPoints">an array of points that make up a polygon, must be less than 2000 points, and must have the first point and the last point be the same point</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.API.NSI.NSI_Stats.TotalCapital">
 <summary>
 This function sums all structure and content value not defined as a damage category of "Residential"
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Consequences_Assist.ComputableObjects.DamageCategory.GetRebuildPeriod">
 <summary>
 This function returns the number of days required to rebuild structures of this occupancy type
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.ComputableObjects.OccupancyTypes.#ctor(System.String)">
 <summary>
 Will load the occupancy types from a file, the format can be either .txt (FDA format see users guide appendix G) or xml (our new standard output)
 </summary>
 <param name="inputfile"></param>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.ComputableObjects.OccupancyTypes.LoadFromFile(System.String)">
 <summary>
 Will load the occupancy types from a file, the format can be either .txt (FDA format see users guide appendix G) or xml (our new standard output)
 </summary>
 <param name="inputfile"></param>
 <remarks></remarks>
</member>
<member name="T:Consequences_Assist.Controls.ComboBoxWithBrowser">
<summary>
ComboBoxWithBrowser
</summary>
</member>
<member name="M:Consequences_Assist.Controls.ComboBoxWithBrowser.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.Controls.DescriptionWindow">
<summary>
DescriptionWindow
</summary>
</member>
<member name="M:Consequences_Assist.Controls.DescriptionWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.Controls.SupportingObjects.PercentOfMeanUncertaintyWarning">
<summary>
PercentOfMeanUncertaintyWarning
</summary>
</member>
<member name="M:Consequences_Assist.Controls.SupportingObjects.PercentOfMeanUncertaintyWarning.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.Controls.TimeSeriesTableWithPlot">
<summary>
TimeSeriesTableWithPlot
</summary>
</member>
<member name="M:Consequences_Assist.Controls.TimeSeriesTableWithPlot.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.Controls.TextBoxDescription">
<summary>
TextBoxDescription
</summary>
</member>
<member name="M:Consequences_Assist.Controls.TextBoxDescription.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.Controls.TextBoxFileBrowser">
<summary>
TextBoxFileBrowser
</summary>
</member>
<member name="M:Consequences_Assist.Controls.TextBoxFileBrowser.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.Controls.TextBoxFolderBrowser">
<summary>
TextBoxFolderBrowser
</summary>
</member>
<member name="M:Consequences_Assist.Controls.TextBoxFolderBrowser.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.OTE">
<summary>
OTE
</summary>
</member>
<member name="M:Consequences_Assist.OTE.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="P:Consequences_Assist.DataGridRowItem.ParentList">
 <summary>
 the list that this row item is an item of. this is used for complex validation rules that require knowledege of neighbors or all other items in the list.
 </summary>
</member>
<member name="M:Consequences_Assist.DataGridRowItem.ForceValidation">
 <summary>
 allows each row item to have all properties update their error state.  this is helpful when the grid is first displayed and when rows are added.
 </summary>
</member>
<member name="M:Consequences_Assist.DataGridRowItem.AddValidationRules">
 <summary>
 the required magic for defining when a property is in error. Use the "AddRule" call to add a specific rule.
 </summary>
</member>
<member name="M:Consequences_Assist.DataGridRowItem.PropertyDisplayName(System.String)">
 <summary>
 allows specification of prettier property names. Default return should be the property name, will appear as column header (unless modified), and as series name if curvedatagridrowitem is used.
 </summary>
 <param name="propertyName">the property that needs to be transformed into a better displayable name</param>
 <returns></returns>
</member>
<member name="M:Consequences_Assist.DataGridRowItem.IsGridDisplayable(System.String)">
 <summary>
 allows specification of properties to not be displayed in a datagrid
 </summary>
 <param name="propertyName">property name </param>
 <returns></returns>
</member>
<member name="M:Consequences_Assist.DataGridRowItem.ValidateProperty(System.String)">
 <summary>
 allows selective validation by property.  this can be called in a setter with an empty argument to validate the property.  by default, this happens in the inotifyproperty changed event. you can define the property name, if you wish for another property other than the one just being set to be validated as well.
 </summary>
 <param name="propertyName"></param>
</member>
<member name="M:Consequences_Assist.DataGridRowItem.AddRule(System.String,System.Func{System.Boolean},System.String,System.String[])">
 <summary>
 Add a rule for a specific property. If the error condition is met then the cell of the defined property will turn red and the error message will show as a tooltip.
 </summary>
 <param name="propertyName">Property name that the rule will be applied to.</param>
 <param name="errorCondition">The condition that dictates an error has occurred or not. If the errorCondition returns true then the property for the give row will be assumed to have an error.</param>
 <param name="errorMessage">The error message that will be shown in the tooltip when the errorCondition returns true.</param>
 <param name="associatedProperties">Any properties that are associated with the target property. This guarantees proper updating when related properties are changed.</param>
</member>
<member name="T:Consequences_Assist.DDEC">
<summary>
DDEC
</summary>
</member>
<member name="M:Consequences_Assist.DDEC.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.NameAndCategory">
<summary>
NameAndCategory
</summary>
</member>
<member name="M:Consequences_Assist.NameAndCategory.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.NameDialog">
<summary>
NameDialog
</summary>
</member>
<member name="M:Consequences_Assist.NameDialog.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.TableWithPlot">
<summary>
TableWithPlot
</summary>
</member>
<member name="M:Consequences_Assist.TableWithPlot.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.TWP">
<summary>
TWP
</summary>
</member>
<member name="M:Consequences_Assist.TWP.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Consequences_Assist.Editing.Controls.UndoRedoControl">
<summary>
UndoRedoControl
</summary>
</member>
<member name="P:Consequences_Assist.Editing.Controls.UndoRedoControl.SetMonitors">
 <summary>
 If the user has created the monitors, they can be added here.
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.Editing.Controls.UndoRedoControl.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:Consequences_Assist.Editing.EditSession.#ctor">
 <summary>
 this constructor allows for the edit monitors to be added after the constructor is called.  This is intended to be utilized through the UndoRedoControl Class, if you wish to construct your own undo and redo buttons, please use the overloaded constructor.
 </summary>
 <remarks></remarks>
</member>
<member name="T:Consequences_Assist.Editing.Primitives.EditAction">
 <summary>
 a class used to compose an edit action and the proper information to undo or redo that action.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.Editing.Primitives.EditAction.Execute">
 <summary>
 raises an event to cause the monitor to undo or redo the action
 </summary>
 <remarks></remarks>
</member>
<member name="P:Consequences_Assist.Editing.Primitives.EditAction.Data">
 <summary>
 a string representation of the edit
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Consequences_Assist.Editing.Primitives.EditAction.ActionType">
 <summary>
 returns the edit action type, such as create, clear, select, check, add, subtract, etc.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:Consequences_Assist.Editing.Primitives.EditAction.EditType">
 <summary>
 returns the edit type, such as string, boolean, or number
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.Editing.Primitives.EditAction.Reverse">
 <summary>
 Reverses the action from undo to redo and vice versa
 </summary>
 <remarks></remarks>
</member>
<member name="M:Consequences_Assist.Editing.Primitives.EditAction.ToString">
 <summary>
 This takes the edit and formats it to a string that explains what the undo or redo should look like
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Consequences_Assist.XamlGeneratedNamespace.GeneratedInternalTypeHelper">
<summary>
GeneratedInternalTypeHelper
</summary>
</member>
<member name="M:Consequences_Assist.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
<summary>
CreateInstance
</summary>
</member>
<member name="M:Consequences_Assist.XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
<summary>
GetPropertyValue
</summary>
</member>
<member name="M:Consequences_Assist.XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
<summary>
SetPropertyValue
</summary>
</member>
<member name="M:Consequences_Assist.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
<summary>
CreateDelegate
</summary>
</member>
<member name="M:Consequences_Assist.XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
<summary>
AddEventHandler
</summary>
</member>
</members>
</doc>
